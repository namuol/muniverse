// Generated by CoffeeScript 1.3.1
var ABANDON_MESSAGES, ACCEPT_MESSAGES, BASE_AFTERBURN, BASE_CARGO_CAP, BASE_SEED, BASE_SHIELDS, BASE_THRUST, BASE_WCHARGE_CAP, BASE_WCHARGE_RATE, BASE_WPOWER, BASE_WSPAN, BASE_WSPEED, Baddie, BriefingDialog, CabinDweller, CargoItem, CrewMission, DAYS, DEFAULT_RADAR_RENDER, DIALOG_MAX_WIDTH, DOCKING_DURATION, Dialog, DialogChoice, EQUIPMENT, Equipment, FAILURE_MESSAGES, FUGITIVE_TAXI_BONUS, GAME_OVER_MSGS, GAS_GIANT_MIN_ORBIT, H, HMenu, HOURS, HUD_BAR_H, HUD_BAR_W, HUD_SHIELD_X, HUD_SHIELD_Y, HUD_X, HUD_Y, Hud, ITG_INSPECT_PROB, LINE_HEIGHT, LY_SCALE, MAX_ITG_REGIONS, MAX_ITG_REGION_RADIUS, MAX_PIRATE_REGIONS, MAX_PIRATE_REGION_RADIUS, MAX_STAR_COUNT, MAX_STAR_PLANETS, MAX_STAR_RAD, MINUTES, MIN_ITG_REGIONS, MIN_ITG_REGION_RADIUS, MIN_ITG_STATION_PROB, MIN_PIRATE_REGIONS, MIN_PIRATE_REGION_RADIUS, MIN_PIRATE_STATION_PROB, MIN_STAR_COUNT, MIN_STAR_RAD, MIN_STATION_DIST, Menu, MenuItem, MenuStack, Message, Mission, MissionStarmap, MissionTicker, MultiMenu, NO_CABINS_MESSAGES, PARTICLES, PLANET_CLASSES, Person, Planet, Planetmap, Player, RADAR_ITEMS, RESOURCES, Radar, Resource, ResourceExchanger, SECONDS, STATIONS, STATION_SUB_SCREENS, SUCCESS_MESSAGES, Shot, Star, Starmap, Station, StationScreen, TURN_SPEED, TaxiMission, VMenu, W, YEARS, addBaddie, addCamera, addDrone, addParticle, cam, choose, circle, clamp, closeDialog, current_planet, current_station, date, dist, drawFunds, flightMode, formatDate, formatDateShort, frand, gaus, getPixel, grand, groupCollides, loadColors, loadResources, main, maingame, menustack, message, planetcolors, planetmapMode, player, rand, rgba, setDialog, setPixel, split_to_lines, starcolors, starmap, starmapMode, startDate, stationMode, testDialog,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

current_station = void 0;

current_planet = void 0;

clamp = function(num, min, max) {
  return Math.min(Math.max(num, min), max);
};

grand = function(random) {
  var f, funcs, n;
  funcs = {
    frand: function(min, max) {
      return min + random() * (max - min);
    },
    rand: function(min, max) {
      return Math.round(min + random() * (max - min));
    },
    gaus: function(mean, stdv) {
      var rnd;
      rnd = (random() * 2 - 1) + (random() * 2 - 1) + (random() * 2 - 1);
      return rnd * stdv + mean;
    },
    choose: function(array) {
      return array[this.rand(0, array.length - 1)];
    }
  };
  for (n in funcs) {
    if (!__hasProp.call(funcs, n)) continue;
    f = funcs[n];
    random[n] = f;
  }
  return random;
};

frand = function(min, max) {
  return min + Math.random() * (max - min);
};

rand = function(min, max) {
  return Math.round(frand(min, max));
};

gaus = function(mean, stdv) {
  var rnd;
  rnd = (Math.random() * 2 - 1) + (Math.random() * 2 - 1) + (Math.random() * 2 - 1);
  return rnd * stdv + mean;
};

dist = function(a, b) {
  var dx, dy;
  dx = a.x - b.x;
  dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};

choose = function(array) {
  return array[rand(0, array.length - 1)];
};

rgba = function(c) {
  return "rgba(" + c[0] + "," + c[1] + "," + c[2] + "," + c[3] + ")";
};

getPixel = function(img, x, y) {
  var a, b, g, pos, r;
  pos = (x + y * img.width) * 4;
  r = img.data[pos];
  g = img.data[pos + 1];
  b = img.data[pos + 2];
  a = img.data[pos + 3];
  return [r, g, b, a];
};

setPixel = function(imageData, x, y, r, g, b, a) {
  var index;
  index = (x + y * imageData.width) * 4;
  imageData.data[index + 0] = r;
  imageData.data[index + 1] = g;
  imageData.data[index + 2] = b;
  return imageData.data[index + 3] = a;
};

circle = function(c, strokeStyle, x, y, radius) {
  c.strokeStyle = strokeStyle;
  c.beginPath();
  c.arc(Math.round(x), Math.round(y), radius, 0, 2 * Math.PI, false);
  return c.stroke();
};

groupCollides = function(obj, group, callback) {
  var gobj, id, _ref;
  _ref = gbox.getGroup(group);
  for (id in _ref) {
    if (!__hasProp.call(_ref, id)) continue;
    gobj = _ref[id];
    if (gbox.collides(obj, gobj)) {
      if (callback) {
        callback(gobj);
      } else {
        return true;
      }
    }
  }
};

SECONDS = 1000;

MINUTES = 60 * SECONDS;

HOURS = 60 * MINUTES;

DAYS = 24 * HOURS;

YEARS = 356 * DAYS;

startDate = function() {
  var y;
  y = rand(3000, 4000);
  return (y - 1970) * YEARS + rand(0, 365) * DAYS;
};

formatDate = function(ms) {
  var d, dt, m, y;
  d = new Date(ms);
  y = d.getUTCFullYear();
  m = d.getUTCMonth() + 1;
  if (m < 10) {
    m = '0' + m;
  }
  dt = d.getUTCDate();
  if (dt < 10) {
    dt = '0' + dt;
  }
  return "" + y + "/" + m + "/" + dt;
};

formatDateShort = function(ms) {
  var d, dt, m, y;
  d = new Date(ms);
  y = d.getUTCFullYear();
  m = d.getUTCMonth() + 1;
  if (m < 10) {
    m = '0' + m;
  }
  dt = d.getUTCDate();
  if (dt < 10) {
    dt = '0' + dt;
  }
  return "" + m + "/" + dt;
};

DIALOG_MAX_WIDTH = 40;

LINE_HEIGHT = 16;

split_to_lines = function(str, max_width) {
  var current_line, lines, word, words, _i, _len;
  lines = [];
  words = str.split(' ');
  current_line = '';
  for (_i = 0, _len = words.length; _i < _len; _i++) {
    word = words[_i];
    if (current_line.length + word.length > max_width) {
      lines.push(current_line);
      current_line = word + ' ';
    } else {
      current_line += word + ' ';
    }
  }
  lines.push(current_line);
  return lines;
};

testDialog = function() {
  var dialog;
  dialog = new Dialog('This is a very long string with lots off words that should probably wrap around the screen if we were to attempt to display it with our dialog class.');
  dialog.pushItem(new DialogChoice('[OKAY]'));
  return setDialog(dialog);
};

setDialog = function(d) {
  gbox.clearGroup('dialog');
  gbox.pauseAllGroups();
  gbox.addObject(d);
  return gbox.unpauseGroup('dialog');
};

closeDialog = function() {
  gbox.clearGroup('dialog');
  return gbox.unpauseAllGroups();
};

Message = (function() {

  Message.name = 'Message';

  Message.prototype.group = 'message';

  function Message() {
    this.visible = false;
    this.msgs = [];
  }

  Message.prototype.add = function(str, lifespan, person) {
    if (lifespan == null) {
      lifespan = 240;
    }
    this.msgs.push({
      str: str,
      lifespan: lifespan,
      person: person
    });
    return this.visible = true;
  };

  Message.prototype.set = function(str, lifespan, person) {
    if (lifespan == null) {
      lifespan = 240;
    }
    this.msgs = [];
    return this.add(str, lifespan, person);
  };

  Message.prototype.first = function() {
    if (!this.visible) {
      return;
    }
    if (this.msgs[0].lifespan !== void 0) {
      if (--this.msgs[0].lifespan < 0) {
        this.msgs.splice(0, 1);
        if (this.msgs.length === 0) {
          return this.visible = false;
        }
      }
    }
  };

  Message.prototype.blit = function() {
    var c;
    if (!this.visible) {
      return;
    }
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    c.fillStyle = 'rgba(0,0,0, 0.5)';
    c.fillRect(0, H - 34, W, 18);
    if (this.msgs[0].person) {
      this.msgs[0].person.render_face(1, H - 33, 1, true);
    }
    return gbox.blitText(c, {
      font: 'small',
      text: this.msgs[0].str,
      dx: 18,
      dy: H - 28,
      dw: W,
      dh: 16,
      halign: gbox.ALIGN_LEFT,
      valign: gbox.ALIGN_TOP
    });
  };

  return Message;

})();

message = new Message;

Menu = (function() {

  Menu.name = 'Menu';

  Menu.prototype.bg = 'starmap_gui';

  Menu.prototype._held = function(key) {
    return gbox.keyIsHit(key) || (gbox.keyIsHeldForAtLeast(key, 15) && gbox.keyHeldTime(key) % 5 === 0);
  };

  function Menu() {
    this.selected = 0;
    this.items = [];
    this.bg_was_rendered = false;
  }

  Menu.prototype.pushItem = function(item) {
    this.items.push(item);
    return item.parent = this;
  };

  Menu.prototype.prev = function() {
    var _results;
    if (this.items.length === 0) {
      return;
    }
    if (this.items.length > 1) {
      sounds.blip.play();
    }
    this.selected = (this.selected - 1) % this.items.length;
    if (this.selected < 0) {
      this.selected = this.items.length - 1;
    }
    _results = [];
    while (this.items[this.selected].disabled) {
      _results.push(this.selected = (this.selected - 1) % this.items.length);
    }
    return _results;
  };

  Menu.prototype.next = function() {
    var _results;
    if (this.items.length === 0) {
      return;
    }
    if (this.items.length > 1) {
      sounds.blip.play();
    }
    this.selected = (this.selected + 1) % this.items.length;
    _results = [];
    while (this.items[this.selected].disabled) {
      _results.push(this.selected = (this.selected + 1) % this.items.length);
    }
    return _results;
  };

  Menu.prototype.a = function() {
    if (this.items[this.selected]) {
      return this.items[this.selected].a();
    }
  };

  Menu.prototype.b = function() {
    if (this.items[this.selected]) {
      return this.items[this.selected].b();
    }
  };

  Menu.prototype.render_bg = function(c) {
    if (this.bg && !this.bg_was_rendered) {
      this.bg_was_rendered = true;
      return gbox.blitAll(c, gbox.getImage(this.bg), {
        dx: 0,
        dy: 0
      });
    }
  };

  Menu.prototype.render = function(x, y, a) {};

  Menu.prototype.update = function() {
    this.bg_was_rendered = false;
    if (this._held('a')) {
      this.a();
    }
    if (this._held('b')) {
      return this.b();
    }
  };

  return Menu;

})();

VMenu = (function(_super) {

  __extends(VMenu, _super);

  VMenu.name = 'VMenu';

  function VMenu() {
    return VMenu.__super__.constructor.apply(this, arguments);
  }

  VMenu.prototype.update = function() {
    VMenu.__super__.update.call(this);
    if (this._held('up')) {
      return this.prev();
    } else if (this._held('down')) {
      return this.next();
    }
  };

  VMenu.prototype.render = function(x, yoff) {
    var alpha, c, height, item, num, top, _i, _j, _len, _len1, _ref, _ref1, _results;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    this.render_bg(c);
    if (this.items.length === 0) {
      return;
    }
    height = 0;
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      height += item.h + 1;
    }
    top = H / 2 - height / 2 + yoff;
    top -= this.items[0].h;
    num = 0;
    _ref1 = this.items;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      item = _ref1[_j];
      top += item.h + 1;
      if (!item.disabled) {
        if (this.selected === num) {
          alpha = 1;
        } else {
          alpha = 0.5;
        }
      } else {
        alpha = 0.25;
      }
      ++num;
      _results.push(item.render(x, top, alpha));
    }
    return _results;
  };

  return VMenu;

})(Menu);

HMenu = (function(_super) {

  __extends(HMenu, _super);

  HMenu.name = 'HMenu';

  function HMenu() {
    return HMenu.__super__.constructor.apply(this, arguments);
  }

  HMenu.prototype.update = function() {
    HMenu.__super__.update.call(this);
    if (this._held('left')) {
      return this.prev();
    } else if (this._held('right')) {
      return this.next();
    }
  };

  HMenu.prototype.render = function(xoff, y) {
    var alpha, c, item, left, num, width, _i, _j, _len, _len1, _ref, _ref1, _results;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    this.render_bg(c);
    width = 0;
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      width += 8 * item.text().length + 8;
    }
    left = W / 2 - width / 2 + xoff;
    num = 0;
    _ref1 = this.items;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      item = _ref1[_j];
      if (!item.disabled) {
        if (this.selected === num) {
          alpha = 1;
        } else {
          alpha = 0.5;
        }
      } else {
        alpha = 0.25;
      }
      ++num;
      item.render(left, y, alpha);
      _results.push(left += 8 * item.text().length + 8);
    }
    return _results;
  };

  return HMenu;

})(Menu);

MultiMenu = (function(_super) {

  __extends(MultiMenu, _super);

  MultiMenu.name = 'MultiMenu';

  function MultiMenu() {
    var i;
    MultiMenu.__super__.constructor.call(this);
    this.skip = false;
    this.sub_screen = 0;
    this.sub_menus = [];
    i = 0;
  }

  MultiMenu.prototype.pushSubMenu = function(menu) {
    menu.parent = this;
    return this.sub_menus.push(menu);
  };

  MultiMenu.prototype.update = function() {
    if (this.sub_menus.length === 0) {
      return;
    }
    this.current_sub_menu = this.sub_menus[this.selected];
    this.current_sub_menu.update();
    return MultiMenu.__super__.update.call(this);
  };

  MultiMenu.prototype.render = function(x, y, a) {
    var c;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    this.render_bg(c);
    if (!this.current_sub_menu) {
      return;
    }
    this.current_sub_menu.render(x, y, a);
    return MultiMenu.__super__.render.call(this, x, y, a);
  };

  return MultiMenu;

})(HMenu);

menustack = void 0;

MenuStack = (function(_super) {

  __extends(MenuStack, _super);

  MenuStack.name = 'MenuStack';

  MenuStack.prototype.group = 'menustack';

  function MenuStack() {
    MenuStack.__super__.constructor.call(this);
    this.stack = [];
  }

  MenuStack.prototype.pushMenu = function(menu) {
    return this.stack.push(menu);
  };

  MenuStack.prototype.update = function() {
    MenuStack.__super__.update.call(this);
    if (this.stack.length > 0) {
      this.stack[this.stack.length - 1].update();
    }
    if (gbox.keyIsHit('c') && this.stack.length > 0) {
      return this.stack.pop();
    }
  };

  MenuStack.prototype.first = function() {
    return this.update();
  };

  MenuStack.prototype.render = function(x, y, a) {
    if (this.stack.length === 0) {
      return;
    }
    return this.stack[this.stack.length - 1].render(x, y, a);
  };

  MenuStack.prototype.blit = function() {
    return this.render(0, 4, 1);
  };

  return MenuStack;

})(Menu);

MenuItem = (function() {

  MenuItem.name = 'MenuItem';

  function MenuItem(name) {
    this.name = name;
    this.h = 16;
  }

  MenuItem.prototype.text = function() {
    return this.name;
  };

  MenuItem.prototype.a = function() {};

  MenuItem.prototype.b = function() {};

  MenuItem.prototype.render = function(x, top, alpha) {
    return gbox.blitText(gbox.getBufferContext(), {
      font: 'small',
      text: this.text(),
      dx: Math.round(x),
      dy: Math.round(top),
      dw: W,
      dh: 16,
      halign: gbox.ALIGN_LEFT,
      valign: gbox.ALIGN_TOP,
      alpha: alpha
    });
  };

  return MenuItem;

})();

Dialog = (function(_super) {

  __extends(Dialog, _super);

  Dialog.name = 'Dialog';

  Dialog.prototype.group = 'dialog';

  function Dialog(msg) {
    this.msg = msg;
    Dialog.__super__.constructor.call(this);
  }

  Dialog.prototype.first = function() {
    this.update();
    if (gbox.keyIsHit('c')) {
      return closeDialog();
    }
  };

  Dialog.prototype.blit = function() {
    return this.render();
  };

  Dialog.prototype.pre_render = function(c) {
    c.fillStyle = 'rgba(0,0,0, 0.85)';
    return c.fillRect(0, 0, W, H);
  };

  Dialog.prototype.render = function() {
    var c, height, line, lines, n, top, _i, _len;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    this.render_bg(c);
    this.pre_render(c);
    n = 0;
    lines = split_to_lines(this.msg, DIALOG_MAX_WIDTH);
    height = lines.length * LINE_HEIGHT;
    top = (H - height) / 2;
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      gbox.blitText(c, {
        font: 'small',
        text: line,
        dx: 0,
        dy: top + n * LINE_HEIGHT,
        dw: W,
        dh: LINE_HEIGHT,
        halign: gbox.ALIGN_LEFT,
        valign: gbox.ALIGN_TOP
      });
      ++n;
    }
    Dialog.__super__.render.call(this, 0, H - 12);
    return this.post_render(c);
  };

  Dialog.prototype.post_render = function(c) {};

  return Dialog;

})(HMenu);

DialogChoice = (function(_super) {

  __extends(DialogChoice, _super);

  DialogChoice.name = 'DialogChoice';

  function DialogChoice() {
    return DialogChoice.__super__.constructor.apply(this, arguments);
  }

  DialogChoice.prototype.a = function() {
    DialogChoice.__super__.a.call(this);
    return closeDialog();
  };

  DialogChoice.prototype.b = function() {};

  DialogChoice.prototype.c = function() {
    return closeDialog();
  };

  return DialogChoice;

})(MenuItem);

window.sounds = {};

soundManager.url = 'swf';

soundManager.flashVersion = 9;

soundManager.useHighPerformance = true;

soundManager.useFastPolling = true;

soundManager.useHTML5Audio = true;

soundManager.onready(function() {
  var sound, sounds_to_load, _i, _len, _results;
  soundManager.defaultOptions.autoLoad = true;
  soundManager.defaultOptions.onload = function() {
    return console.log('sound loaded!');
  };
  sounds_to_load = [
    {
      id: 'blip',
      url: 'blip1.wav',
      volume: 50
    }, {
      id: 'select',
      url: 'select0.wav',
      volume: 50
    }, {
      id: 'cancel',
      url: 'cancel0.wav',
      volume: 50
    }, {
      id: 'explode',
      url: 'explode0.wav',
      volume: 25
    }, {
      id: 'hit0',
      url: 'hit00.wav',
      volume: 50
    }, {
      id: 'hit1',
      url: 'hit01.wav',
      volume: 50
    }, {
      id: 'hit2',
      url: 'hit02.wav',
      volume: 50
    }, {
      id: 'hit3',
      url: 'hit03.wav',
      volume: 50
    }, {
      id: 'shot0',
      url: 'shot0.wav',
      volume: 30
    }, {
      id: 'shot1',
      url: 'shot1.wav',
      volume: 30
    }
  ];
  _results = [];
  for (_i = 0, _len = sounds_to_load.length; _i < _len; _i++) {
    sound = sounds_to_load[_i];
    _results.push(sounds[sound.id] = soundManager.createSound(sound));
  }
  return _results;
});

Person = (function() {

  Person.name = 'Person';

  function Person(role, fugitive) {
    this.parts = [];
    this.parts.push(rand(0, 15));
    this.parts.push(rand(0, 15));
    if (rand(0, 1)) {
      this.parts.push(this.parts[1]);
    }
    this.role = role;
    this.fugitive = fugitive;
    this.tick = 0;
  }

  Person.prototype.render = function(x, y, alpha, talking) {
    this.render_face(x, y, alpha, talking);
    if (!this.fugitive) {
      return;
    }
    return gbox.blitAll(gbox.getBufferContext(), gbox.getImage('fugitive_icon'), {
      dx: Math.round(x + 17),
      dy: Math.round(y + 5)
    });
  };

  Person.prototype.render_face = function(x, y, alpha, talking) {
    var n, partNum, yoff, _i, _len, _ref, _results;
    n = 0;
    _ref = this.parts;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      partNum = _ref[_i];
      yoff = 0;
      gbox.blitTile(gbox.getBufferContext(), {
        tileset: 'peoples_tiles',
        tile: n * 16 + partNum,
        dx: Math.round(x),
        dy: Math.round(y + yoff)
      });
      _results.push(++n);
    }
    return _results;
  };

  return Person;

})();

Baddie = (function() {

  Baddie.name = 'Baddie';

  Baddie.prototype.group = 'baddies';

  function Baddie(planet) {
    this.num = 0;
    this.frame = 0;
    this.image = gbox.getImage('bad' + this.num);
    this.w = 8;
    this.h = 8;
    this.x = Math.random() * gbox.getScreenW() * 3;
    this.y = Math.random() * gbox.getScreenH() * 3;
    this.vx = 0;
    this.vy = 0;
    this.wcharge_cap = 50;
    this.wcharge = this.wcharge_cap;
    this.wspeed = 1;
    this.wpower = 1;
    this.wcost = 50;
    this.wspan = 80;
    this.tx = this.x;
    this.ty = this.y;
    this.tsx = 0;
    this.tsy = 0;
    this.attack_dist = 90;
    this.orbit_radius = 60;
    this.hostile = Math.random() < (0.25 + current_planet.star.pirate - current_planet.star.itg);
    this.ang = 0;
    this.thrust = 0.006;
    this.afterburn = 0.005;
    this.shields = 3;
    this.cargo_cap = 10;
    this.cargo = {};
  }

  Baddie.prototype.first = function() {
    var ax, ay, d, dx, dy, len, xoff, yoff,
      _this = this;
    if (!player.alive) {
      this.hostile = false;
    }
    if (this.hostile) {
      dx = player.x - this.x;
      dy = player.y - this.y;
      d = Math.sqrt(dx * dx + dy * dy);
      if (d < W) {
        if (this.wcharge >= this.wcost && d < this.attack_dist) {
          sounds.shot1.play();
          this.tsx = player.x + player.vx + this.vx;
          this.tsy = player.y + player.vy + this.vy;
          this.wcharge -= this.wcost;
          gbox.addObject(new Shot(this.x + this.w / 2, this.y + this.h / 2, this.tsx, this.tsy, this.wpower, this.wspeed, 1, 'foe_shots', this.wspan, this.vx, this.vy));
        }
      }
      this.ang += 0.005;
      xoff = Math.cos(this.ang);
      yoff = Math.sin(this.ang);
      this.tx = player.x + xoff * this.orbit_radius;
      this.ty = player.y + xoff * this.orbit_radius;
    } else {
      if (Math.random() < 0.01) {
        this.tx = gbox.getScreenW() * Math.random();
        this.ty = gbox.getScreenH() * Math.random();
      }
    }
    ax = this.tx - this.x;
    ay = this.ty - this.y;
    len = Math.sqrt(ax * ax + ay * ay);
    if (len > 0) {
      ax /= len;
      ay /= len;
      ax *= this.thrust;
      ay *= this.thrust;
      this.vx += ax;
      this.vy += ay;
    }
    this.x += this.vx;
    this.y += this.vy;
    this.vx *= 1 - this.afterburn;
    this.vy *= 1 - this.afterburn;
    if (this.wcharge < this.wcharge_cap) {
      this.wcharge += 1;
    }
    return groupCollides(this, 'friend_shots', function(shot) {
      var i;
      sounds['hit' + rand(0, 3)].play();
      _this.hostile = true;
      _this.shields -= shot.power;
      i = 0;
      while (i < 3) {
        addParticle('fire', _this.x + _this.w / 2, _this.y + _this.h / 2, _this.vx + frand(-0.5, 0.5), _this.vy + frand(-.5, .5));
        ++i;
      }
      addParticle('wreckage', _this.x + _this.w / 2, _this.y + _this.h / 2, _this.vx + frand(-0.5, 0.5), _this.vy + frand(-.5, .5));
      if (_this.shields < 0) {
        sounds.explode.play();
        _this.die();
        i = 0;
        while (i < 20) {
          addParticle('fire', _this.x + _this.w / 2, _this.y + _this.h / 2, _this.vx + frand(-1, 1), _this.vy + frand(-1, 1));
          ++i;
        }
        i = 0;
        while (i < 12) {
          addParticle('wreckage', _this.x + _this.w / 2, _this.y + _this.h / 2, _this.vx + frand(-0.5, 0.5), _this.vy + frand(-.5, .5));
          ++i;
        }
      }
      return shot.die();
    });
  };

  Baddie.prototype.die = function() {
    return gbox.trashObject(this);
  };

  Baddie.prototype.blit = function() {
    return gbox.blitAll(gbox.getBufferContext(), this.image, {
      dx: Math.round(this.x - cam.x),
      dy: Math.round(this.y - cam.y)
    });
  };

  return Baddie;

})();

addBaddie = function(planet) {
  return gbox.addObject(new Baddie(planet));
};

EQUIPMENT = {
  repair: {
    name: 'Repair Shields',
    price: function() {
      return (player.shields_max - player.shields) * 100;
    },
    apply: function() {
      return player.shields = player.shields_max;
    }
  },
  thrust: {
    name: 'Thruster',
    levels: [
      {
        price: function() {
          return 1500;
        },
        val: 0.045 * 0.33,
        desc: 'Standard introductory thruster.'
      }, {
        price: function() {
          return 10000;
        },
        val: 0.045 * 0.66,
        desc: '2X the thrust as introductory thruster.'
      }, {
        price: function() {
          return 40000;
        },
        val: 0.045,
        desc: '3X the thrust as introductory thruster.'
      }
    ]
  },
  wpower: {
    name: 'Plasma Cannon',
    levels: [
      {
        price: function() {
          return 1000;
        },
        val: 0.5
      }, {
        price: function() {
          return 5000;
        },
        val: 1
      }, {
        price: function() {
          return 20000;
        },
        val: 2
      }
    ]
  },
  wcharge_rate: {
    name: 'Weapon Charger',
    levels: [
      {
        price: function() {
          return 10000;
        },
        val: 0.025
      }, {
        price: function() {
          return 20000;
        },
        val: 0.07
      }, {
        price: function() {
          return 60000;
        },
        val: 0.3
      }
    ]
  },
  afterburn: {
    name: 'Afterburner',
    levels: [
      {
        price: function() {
          return 2000;
        },
        val: 0.008
      }, {
        price: function() {
          return 15000;
        },
        val: 0.015
      }, {
        price: function() {
          return 60000;
        },
        val: 0.03
      }
    ]
  },
  shields_max: {
    name: 'Shields',
    levels: [
      {
        price: function() {
          return 2000;
        },
        val: 3
      }, {
        price: function() {
          return 25000;
        },
        val: 10
      }, {
        price: function() {
          return 90000;
        },
        val: 25
      }
    ]
  },
  ftl_ms_per_ly: {
    name: 'FTL Drive',
    levels: [
      {
        price: function() {
          return 4000;
        },
        val: 2 * DAYS
      }, {
        price: function() {
          return 10000;
        },
        val: 1 * DAYS
      }, {
        price: function() {
          return 50000;
        },
        val: 0.5 * DAYS
      }
    ]
  }
};

Equipment = (function(_super) {

  __extends(Equipment, _super);

  Equipment.name = 'Equipment';

  function Equipment(eq) {
    this.eq = eq;
    Equipment.__super__.constructor.call(this, this.eq);
  }

  Equipment.prototype.a = function() {
    var lvl;
    if (this.eq.price) {
      if (player.funds < this.eq.price()) {
        message.set('Insufficient funds.', 120);
        return;
      }
      this.eq.apply();
      return;
    }
    lvl = player.equipment[this.eq.name];
    if (lvl >= 2) {
      return;
    }
    if (player.funds < this.eq.levels[lvl + 1].price()) {
      message.set('Insufficient funds.', 120);
      return;
    }
    player.funds -= this.eq.levels[lvl + 1].price();
    player[this.eq.attr] = this.eq.levels[lvl + 1].val;
    return ++player.equipment[this.eq.name];
  };

  Equipment.prototype.b = function() {
    var lvl;
    lvl = player.equipment[this.eq.name];
    if (!this.eq.levels || lvl === void 0) {
      return;
    }
    ++lvl;
    if (this.eq.levels[lvl].desc) {
      return setDialog(new Dialog(this.eq.levels[lvl].desc));
    }
  };

  Equipment.prototype.text = function() {
    var lvl, lvl_vis;
    if (this.eq.price) {
      return this.eq.name + ' $' + this.eq.price();
    }
    lvl = player.equipment[this.eq.name];
    lvl_vis = lvl + 2;
    if (lvl_vis >= 4) {
      return this.eq.name + ' v3.0 - MAX';
    }
    return this.eq.name + ' v' + lvl_vis + '.0 $' + this.eq.levels[lvl + 1].price();
  };

  return Equipment;

})(MenuItem);

Shot = (function() {

  Shot.name = 'Shot';

  function Shot(x, y, tx, ty, power, speed, frame, group, lifespan, vx, vy) {
    var len;
    this.group = group;
    this.frame = frame;
    this.tileset = 'shots_tiles';
    this.w = 3;
    this.h = 3;
    this.x = x - this.w / 2;
    this.y = y - this.h / 2;
    this.vx = tx - this.x;
    this.vy = ty - this.y;
    len = Math.sqrt(this.vx * this.vx + this.vy * this.vy);
    this.vx /= len;
    this.vy /= len;
    this.vx *= speed;
    this.vy *= speed;
    if (vx && vy) {
      this.vx += vx;
      this.vy += vy;
    }
    this.lifespan = lifespan || 99999;
    this.tick = 0;
    this.power = power;
  }

  Shot.prototype.die = function() {
    return gbox.trashObject(this);
  };

  Shot.prototype.first = function() {
    this.x += this.vx;
    this.y += this.vy;
    ++this.tick;
    if (this.tick > this.lifespan) {
      return this.die();
    }
  };

  Shot.prototype.blit = function() {
    return gbox.blitTile(gbox.getBufferContext(), {
      tileset: this.tileset,
      tile: this.frame,
      dx: Math.round(this.x - cam.x),
      dy: Math.round(this.y - cam.y)
    });
  };

  return Shot;

})();

PARTICLES = {
  fire: {
    num: 0,
    lifespan: 60,
    randomframe: false,
    frame_length: 60 / 16
  },
  wreckage: {
    num: 1,
    lifespan: 200,
    frame_length: 4,
    randomframe: true
  }
};

addParticle = function(name, x, y, vx, vy) {
  return gbox.addObject({
    group: 'particles',
    num: PARTICLES[name].num,
    lifespan: PARTICLES[name].lifespan,
    w: 0.1,
    h: 0.1,
    vx: 0,
    vy: 0,
    init: function() {
      this.frame_length = PARTICLES[name].frame_length;
      this.next_frame = this.frame_length;
      this.frame = this.num * 16;
      if (PARTICLES[name].randomframe) {
        this.frame += rand(0, 15);
      }
      this.tileset = 'particles_tiles';
      this.w = 3;
      this.h = 3;
      if (vx && vy) {
        this.vx = vx;
        this.vy = vy;
      }
      this.tick = 0;
      this.x = x;
      return this.y = y;
    },
    die: function() {
      return gbox.trashObject(this);
    },
    first: function() {
      this.x += this.vx;
      this.y += this.vy;
      --this.next_frame;
      if (this.next_frame < 0) {
        this.frame = this.num * 16 + ((this.frame % 16) + 1) % 16;
        this.next_frame = this.frame_length;
      }
      ++this.tick;
      if (this.tick > this.lifespan) {
        return this.die();
      }
    },
    initialize: function() {
      return this.init();
    },
    blit: function() {
      return gbox.blitTile(gbox.getBufferContext(), {
        tileset: this.tileset,
        tile: this.frame,
        dx: Math.round(this.x - cam.x),
        dy: Math.round(this.y - cam.y)
      });
    }
  });
};

ACCEPT_MESSAGES = ['You won\'t regret it.', 'Okay!', 'Excellent!', 'Wise choice.'];

ABANDON_MESSAGES = ['I thought we had a deal!', 'Oh well, your loss.', 'Why the sudden change of heart?', 'Can\'t make up your mind, can you?'];

SUCCESS_MESSAGES = ['Pleasure doing business with you.', 'Thank you!', 'Thank you so much!', 'Keep up the good work.'];

FAILURE_MESSAGES = ['What a waste of time!', 'Worthless! You will not be paid.', 'Ugh. Goodbye.'];

Mission = (function(_super) {

  __extends(Mission, _super);

  Mission.name = 'Mission';

  function Mission(person) {
    this.person = person;
    Mission.__super__.constructor.call(this, 'MISSION');
    this.accepted = false;
  }

  Mission.prototype.success = function() {
    var idx;
    idx = player.missions.indexOf(this);
    player.missions.splice(idx, 1);
    message.set(choose(SUCCESS_MESSAGES), 240, this.person);
    if (this.price) {
      return player.funds += this.price;
    }
  };

  Mission.prototype.failure = function() {
    var idx;
    idx = player.missions.indexOf(this);
    player.missions.splice(idx, 1);
    return message.set(choose(FAILURE_MESSAGES), 240, this.person);
  };

  Mission.prototype.onaccept = function() {
    return message.set(choose(ACCEPT_MESSAGES), 240, this.person);
  };

  Mission.prototype.onabandon = function() {
    return message.set(choose(ABANDON_MESSAGES), 240, this.person);
  };

  Mission.prototype.accept_or_abandon = function() {
    var dq, idx;
    dq = this.doesnt_qualify();
    if (dq) {
      message.set(dq, 240, this.person);
      return false;
    }
    this.accepted = !this.accepted;
    if (this.accepted) {
      player.missions.push(this);
      this.onaccept();
      sounds.select.play();
    } else {
      idx = player.missions.indexOf(this);
      player.missions.splice(idx, 1);
      this.onabandon();
      sounds.cancel.play();
    }
    return true;
  };

  Mission.prototype.doesnt_qualify = function() {
    return false;
  };

  Mission.prototype.text = function() {
    if (this.accepted) {
      return '[X]';
    } else {
      return '[ ]';
    }
  };

  Mission.prototype.render = function(x, top, alpha) {
    this.person.render(x, top, alpha);
    return Mission.__super__.render.call(this, x + 24, top + 4, alpha);
  };

  Mission.prototype.tick = function() {};

  return Mission;

})(MenuItem);

MissionTicker = (function() {

  MissionTicker.name = 'MissionTicker';

  function MissionTicker() {}

  MissionTicker.prototype.group = 'game';

  MissionTicker.prototype.first = function() {
    var mission, tmp, _i, _len, _results;
    tmp = player.missions.slice(0);
    _results = [];
    for (_i = 0, _len = tmp.length; _i < _len; _i++) {
      mission = tmp[_i];
      _results.push(mission.tick());
    }
    return _results;
  };

  return MissionTicker;

})();

NO_CABINS_MESSAGES = ['That\'s a bit too cozy for my taste.', 'It looks like you\'re full.', 'You\'ll need to make room for me.'];

CabinDweller = (function(_super) {

  __extends(CabinDweller, _super);

  CabinDweller.name = 'CabinDweller';

  function CabinDweller(person) {
    this.person = person;
    CabinDweller.__super__.constructor.call(this, this.person);
  }

  CabinDweller.prototype.success = function() {
    var idx;
    CabinDweller.__super__.success.call(this);
    idx = player.cabins.indexOf(this.person);
    return player.cabins.splice(idx, 1);
  };

  CabinDweller.prototype.accept_or_abandon = function() {
    var idx;
    if (CabinDweller.__super__.accept_or_abandon.call(this)) {
      if (this.accepted) {
        return player.cabins.push(this.person);
      } else {
        idx = player.cabins.indexOf(this.person);
        return player.cabins.splice(idx, 1);
      }
    }
  };

  CabinDweller.prototype.doesnt_qualify = function() {
    if (this.accepted) {
      return false;
    }
    if (player.cabins.length >= player.available_cabins) {
      return choose(NO_CABINS_MESSAGES);
    } else {
      return false;
    }
  };

  return CabinDweller;

})(Mission);

BriefingDialog = (function(_super) {

  __extends(BriefingDialog, _super);

  BriefingDialog.name = 'BriefingDialog';

  function BriefingDialog() {
    return BriefingDialog.__super__.constructor.apply(this, arguments);
  }

  BriefingDialog.prototype.pre_render = function() {};

  return BriefingDialog;

})(Dialog);

MissionStarmap = (function(_super) {

  __extends(MissionStarmap, _super);

  MissionStarmap.name = 'MissionStarmap';

  function MissionStarmap(mission) {
    this.mission = mission;
    MissionStarmap.__super__.constructor.call(this, '');
  }

  MissionStarmap.prototype.pre_render = function(c) {
    starmap.render_itg_regions(c);
    starmap.render_pirate_regions(c);
    starmap.render_fuel_range(c);
    starmap.render_map(c);
    starmap.render_current_star(c);
    starmap.render_current_missions(c);
    starmap.render_selected_star(c, this.mission.location.star);
    return starmap.render_star_info(c, this.mission.location.star);
  };

  return MissionStarmap;

})(Dialog);

FUGITIVE_TAXI_BONUS = 1.25;

TaxiMission = (function(_super) {

  __extends(TaxiMission, _super);

  TaxiMission.name = 'TaxiMission';

  TaxiMission.prototype.type = 'taxi';

  function TaxiMission(person) {
    var hurry, ms_per_ly, station;
    this.person = person;
    TaxiMission.__super__.constructor.call(this, this.person);
    if (this.person.fugitive) {
      this.price *= FUGITIVE_TAXI_BONUS;
      this.loc_name = 'Pirate st.';
      station = choose(starmap.known_pirate_stations);
    } else {
      this.loc_name = 'ITG st.';
      station = choose(starmap.known_itg_stations);
    }
    this.star = station.star;
    this.star.dist = starmap.current_star.distance_to(this.star);
    this.lvl = choose([0, 0, 0, 1, 1, 2]);
    ms_per_ly = EQUIPMENT.ftl_ms_per_ly.levels[this.lvl].val;
    hurry = Math.random();
    this.deadline = date + this.star.dist * ms_per_ly * (2.5 - hurry);
    this.price = RESOURCES.fuel.mean_price * 4;
    this.price *= this.star.dist;
    this.price += this.price * hurry * 0.5;
    this.price *= this.lvl + 1;
    this.price = Math.round(this.price * 100) / 100;
    this.location = {
      star: this.star,
      pnum: station.planet
    };
  }

  TaxiMission.prototype.a = function() {
    var brief, map, menu,
      _this = this;
    menu = new MultiMenu;
    menu.pushItem(new MenuItem('Starmap'));
    map = new MissionStarmap(this);
    menu.sub_menus.push(map);
    menu.pushItem(new MenuItem('Brief'));
    brief = new BriefingDialog('This is placeholder text for brief');
    menu.sub_menus.push(brief);
    menu.a = function() {
      if (!_this.accepted) {
        return _this.accept_or_abandon();
      }
    };
    menu.b = function() {
      if (_this.accepted) {
        return _this.accept_or_abandon();
      }
    };
    return menustack.pushMenu(menu);
  };

  TaxiMission.prototype.text = function() {
    return TaxiMission.__super__.text.call(this) + 'Taxi lvl' + this.lvl + ' by ' + formatDateShort(this.deadline) + ' $' + this.price;
  };

  TaxiMission.prototype.tick = function() {
    if (!current_station) {
      return;
    }
    if (current_station.planet.num === this.location.pnum && current_station.planet.star === this.location.star) {
      if (date > this.deadline) {
        return this.failure();
      } else {
        return this.success();
      }
    }
  };

  return TaxiMission;

})(CabinDweller);

CrewMission = (function(_super) {

  __extends(CrewMission, _super);

  CrewMission.name = 'CrewMission';

  function CrewMission() {
    return CrewMission.__super__.constructor.apply(this, arguments);
  }

  CrewMission.prototype.type = 'crew';

  CrewMission.prototype.text = function() {
    return CrewMission.__super__.text.call(this) + 'Crew';
  };

  return CrewMission;

})(CabinDweller);

planetmapMode = function() {
  var g, groups, stopGroups, _i, _j, _len, _len1;
  stopGroups = ['background', 'planet', 'player', 'baddies', 'drones', 'friend_shots', 'foe_shots', 'resources', 'particles', 'starmap', 'stations', 'radar', 'hud'];
  for (_i = 0, _len = stopGroups.length; _i < _len; _i++) {
    g = stopGroups[_i];
    gbox.stopGroup(g);
  }
  groups = ['planetmap'];
  for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
    g = groups[_j];
    gbox.stopGroup(g);
    gbox.toggleGroup(g);
  }
  player.skip = true;
  if (!gbox.getObject('planetmap', 'pmap')) {
    return gbox.addObject(window.planetmap);
  }
};

GAS_GIANT_MIN_ORBIT = 0.5;

PLANET_CLASSES = {
  gas_giant: {
    prob: 0.5,
    min_radius: 60,
    max_radius: 120,
    min_moons: 0,
    max_moons: 8,
    min_orbit: 0.5,
    max_orbit: 1.0,
    station_prob: 0.5,
    max_mission_count: 5,
    ring_prob: 0.25
  },
  rocky: {
    prob: 0.5,
    min_radius: 20,
    max_radius: 60,
    min_orbit: 0.15,
    max_orbit: 1.0,
    min_moons: 0,
    max_moons: 3,
    station_prob: 0.75,
    max_mission_count: 10,
    ring_prob: 0.1
  },
  moon: {
    min_radius: 10,
    max_radius: 20,
    station_prob: 0.25,
    max_mission_count: 7,
    ring_prob: 0
  }
};

MIN_ITG_STATION_PROB = 0.1;

MIN_PIRATE_STATION_PROB = 0.1;

MIN_STATION_DIST = 100;

Planet = (function() {

  Planet.name = 'Planet';

  function Planet(star, pid, num, moon, itg, pirate) {
    var ang, cls, itg_station_prob, letters, m, max_resource_count, mcount, name, pirate_station_prob, r, res, x, y;
    this.star = star;
    this.pid = pid;
    this.num = num;
    this.random = grand(Math.prng(this.pid));
    this._x = 0;
    this._y = 0;
    this.orbit = this.star.pcount / this.num;
    if (moon) {
      this.ptype = 'moon';
      this.color = rgba(this.random.choose(planetcolors[2]));
    } else if (this.orbit > GAS_GIANT_MIN_ORBIT && this.random() < PLANET_CLASSES.gas_giant.prob) {
      this.ptype = 'gas_giant';
      this.color = rgba(this.random.choose(planetcolors[1]));
    } else {
      this.ptype = 'rocky';
      this.color = rgba(this.random.choose(planetcolors[0]));
    }
    cls = PLANET_CLASSES[this.ptype];
    this.radius = this.random.frand(cls.min_radius, cls.max_radius);
    this.wealth = this.random();
    max_resource_count = ((Math.PI * this.radius * this.radius) / 50) * this.wealth;
    this.resources = {};
    this.prices = {};
    for (name in RESOURCES) {
      if (!__hasProp.call(RESOURCES, name)) continue;
      res = RESOURCES[name];
      this.resources[name] = [];
      this.prices[name] = this.random.gaus(this.star.prices[name], RESOURCES[name].price_stdv / 2.5);
      /*
            resource_wealth = res[@ptype+'_prob']
            count = Math.round(@random.frand(0, resource_wealth * max_resource_count))
            c=0
            while c < count
              ang = Math.PI*2 * @random()
              r=@radius*@random.frand(res.min_dist,res.max_dist)
              x=r*Math.cos(ang)
              y=r*Math.sin(ang)
              @resources[name].push new Resource name, x,y, 0,0, @
              ++c
      */

    }
    this.itg_station = null;
    this.pirate_station = null;
    itg_station_prob = cls.station_prob * this.star.itg + MIN_ITG_STATION_PROB;
    pirate_station_prob = cls.station_prob * this.star.pirate + MIN_PIRATE_STATION_PROB;
    if ((itg === this.num) || this.random() < itg_station_prob) {
      r = MIN_STATION_DIST + this.radius * 2;
      ang = this.random() * 2 * Math.PI;
      x = this._x + r * Math.cos(ang);
      y = this._y + r * Math.sin(ang);
      this.itg_station = new Station(this, 'itg', x, y);
      this.itg_station.new_missions();
    }
    if ((pirate === this.num) || this.random() < pirate_station_prob) {
      r = MIN_STATION_DIST + this.radius * 4;
      ang = this.random() * 2 * Math.PI;
      x = this._x + r * Math.cos(ang);
      y = this._y + r * Math.sin(ang);
      this.pirate_station = new Station(this, 'pirate', x, y);
      this.pirate_station.new_missions();
    }
    this.moons = [];
    if (moon) {
      return;
    }
    mcount = Math.round(this.random.rand(cls.min_moons, cls.max_moons) * (this.radius / 120));
    letters = 'abcdefghijklmnopqrstuvqxyz';
    m = 0;
    while (m < mcount) {
      this.moons.push(new Planet(this.star, this.pid + letters[m], m, true));
      ++m;
    }
    this.init();
  }

  Planet.prototype.addResources = function() {
    var k, r, v, _ref, _results;
    _ref = this.resources;
    _results = [];
    for (k in _ref) {
      if (!__hasProp.call(_ref, k)) continue;
      v = _ref[k];
      _results.push((function() {
        var _i, _len, _results1;
        _results1 = [];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          r = v[_i];
          _results1.push(gbox.addObject(r));
        }
        return _results1;
      })());
    }
    return _results;
  };

  Planet.prototype.count = function() {
    return 1 + this.moons.length;
  };

  Planet.prototype.group = 'planet';

  Planet.prototype.init = function() {
    this.ang = 0;
    this.xoff = 0;
    this.yoff = 0;
    this.dist = 3;
    this.dirx = frand(-this.radius, this.radius);
    return this.diry = frand(-this.radius * .1, this.radius * .1);
  };

  Planet.prototype.first = function() {
    this.ang += 0.02;
    this.xoff = 0;
    this.yoff = 3 * Math.sin(this.ang);
    this.x = Math.round(this._x + this.xoff);
    return this.y = Math.round(this._y + this.yoff);
  };

  Planet.prototype.render = function(scale, x, y, dirx, diry) {
    var ctx, grd, radius;
    ctx = gbox.getBufferContext();
    if (!ctx) {
      return;
    }
    radius = this.radius * scale;
    dirx *= scale;
    diry *= scale;
    ctx.beginPath();
    grd = ctx.createRadialGradient(x + dirx, y + diry, 0, x + dirx, y + diry, radius * 1.4);
    grd.addColorStop(0, this.color);
    grd.addColorStop(1, '#000510');
    ctx.fillStyle = grd;
    ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
    ctx.fill();
    return ctx.closePath();
  };

  Planet.prototype.blit = function() {
    var x, y;
    x = Math.round(this.x - cam.x);
    y = Math.round(this.y - cam.y);
    return this.render(1.0, x, y, this.dirx, this.diry);
  };

  return Planet;

})();

window.planetmap = void 0;

Planetmap = (function() {

  Planetmap.name = 'Planetmap';

  Planetmap.prototype.id = 'pmap';

  Planetmap.prototype.group = 'planetmap';

  function Planetmap(star) {
    var m, moon, p, planet, x, y, _i, _j, _len, _len1, _ref, _ref1;
    this.skip = false;
    this.star = star;
    this.tick = 0;
    this.cursor = {
      x: 0,
      y: 0
    };
    this.positions = [];
    y = H / 2;
    p = 0;
    _ref = this.star.planets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      planet = _ref[_i];
      this.positions.push([]);
      x = W * 0.1 + (W * 0.8) * ((p + 1) / this.star.planets.length);
      planet.cursorpos = {
        x: x,
        y: y,
        r: planet.radius * 0.25
      };
      this.positions[p].push(planet.cursorpos);
      m = 0;
      _ref1 = planet.moons;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        moon = _ref1[_j];
        moon.cursorpos = {
          x: x,
          y: y + (planet.radius * 0.5 + (m + 1) * PLANET_CLASSES.moon.max_radius) * 0.5,
          r: moon.radius * 0.25
        };
        this.positions[p].push(moon.cursorpos);
        ++m;
      }
      ++p;
    }
  }

  Planetmap.prototype.first = function() {
    var new_planet;
    if (this.skip) {
      this.skip = false;
      return;
    }
    if (gbox.keyIsHit('c')) {
      starmapMode();
      return;
    }
    if (gbox.keyIsHit('a')) {
      sounds.select.play();
      new_planet = void 0;
      if (this.cursor.y) {
        new_planet = this.star.planets[this.cursor.x].moons[this.cursor.y - 1];
      } else {
        new_planet = this.star.planets[this.cursor.x];
      }
      if (new_planet !== current_planet) {
        current_planet = new_planet;
        current_planet.init();
        starmap.current_star = current_planet.star;
        player.vx = 0;
        player.vy = 0;
        player.x = frand(-W, W);
        player.y = frand(-W, W);
        flightMode(true);
      }
    }
    if (this.positions.length === 0) {
      return;
    }
    if (gbox.keyIsHit('up')) {
      sounds.blip.play();
      this.cursor.y -= 1;
    } else if (gbox.keyIsHit('down')) {
      sounds.blip.play();
      this.cursor.y += 1;
    }
    if (gbox.keyIsHit('left')) {
      sounds.blip.play();
      this.cursor.x -= 1;
    } else if (gbox.keyIsHit('right')) {
      sounds.blip.play();
      this.cursor.x += 1;
    }
    if (this.cursor.x < 0) {
      this.cursor.x = this.positions.length - 1;
    }
    if (this.cursor.y < 0) {
      this.cursor.y = this.positions[this.cursor.x].length - 1;
    }
    this.cursor.x = this.cursor.x % this.positions.length;
    return this.cursor.y = this.cursor.y % this.positions[this.cursor.x].length;
  };

  Planetmap.prototype.blit = function() {
    var c, m, moon, p, planet, pos, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    c = gbox.getBufferContext();
    if (c) {
      gbox.blitAll(c, gbox.getImage('starmap_gui'), {
        dx: 0,
        dy: 0
      });
      gbox.blitText(c, {
        font: 'small',
        text: "PLANETS: " + (this.star.planet_count()),
        dx: 1,
        dy: H - 12,
        dw: 64,
        dh: 16
      });
      if (this.positions.length === 0) {
        return;
      }
      p = 0;
      _ref = this.star.planets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        planet = _ref[_i];
        if (p !== this.cursor.x) {
          x = this.positions[p][0].x;
          y = this.positions[p][0].y;
          planet.render(0.25, x, y, -planet.radius, 0);
          m = 0;
          _ref1 = planet.moons;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            moon = _ref1[_j];
            x = this.positions[p][m + 1].x;
            y = this.positions[p][m + 1].y;
            moon.render(0.25, x, y, -moon.radius, 0);
            ++m;
          }
        }
        ++p;
      }
      p = this.cursor.x;
      planet = this.star.planets[p];
      x = this.positions[p][0].x;
      y = this.positions[p][0].y;
      planet.render(0.25, x, y, -planet.radius * 0.5, 0);
      m = 0;
      _ref2 = planet.moons;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        moon = _ref2[_k];
        x = this.positions[p][m + 1].x;
        y = this.positions[p][m + 1].y;
        moon.render(0.25, x, y, -moon.radius * 0.5, 0);
        ++m;
      }
      _ref3 = player.missions;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        m = _ref3[_l];
        if (m.location && m.location.star === this.star) {
          pos = this.positions[m.location.pnum][0];
          gbox.blitTile(c, {
            tileset: 'cursors',
            tile: 6,
            dx: Math.round(pos.x) - 4,
            dy: Math.round(pos.y) - 4
          });
        }
      }
      pos = this.positions[this.cursor.x][this.cursor.y];
      gbox.blitTile(c, {
        tileset: 'cursors',
        tile: 5,
        dx: Math.round(pos.x) - 4,
        dy: Math.round(pos.y) - 4
      });
      if (current_planet && current_planet.star === this.star) {
        pos = current_planet.cursorpos;
        return gbox.blitTile(c, {
          tileset: 'cursors',
          tile: 4,
          dx: Math.round(pos.x) - 4,
          dy: Math.round(pos.y) - 4
        });
      }
    }
  };

  return Planetmap;

})();

starmapMode = function() {
  var g, groups, stopGroups, _i, _j, _len, _len1;
  stopGroups = ['background', 'planet', 'player', 'baddies', 'drones', 'friend_shots', 'foe_shots', 'resources', 'particles', 'planetmap', 'stations', 'radar', 'hud'];
  for (_i = 0, _len = stopGroups.length; _i < _len; _i++) {
    g = stopGroups[_i];
    gbox.stopGroup(g);
  }
  groups = ['starmap'];
  for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
    g = groups[_j];
    gbox.stopGroup(g);
    gbox.toggleGroup(g);
  }
  return player.skip = true;
};

MIN_STAR_COUNT = 800;

MAX_STAR_COUNT = 1100;

MIN_STAR_RAD = 900;

MAX_STAR_RAD = 40000;

MAX_STAR_PLANETS = 15;

Star = (function() {

  Star.name = 'Star';

  Star.prototype.distance_to = function(other) {
    var dx, dy;
    dx = other.x - this.x;
    dy = other.y - this.y;
    return LY_SCALE * Math.sqrt(dx * dx + dy * dy);
  };

  function Star(sector, num, x, y, color, itg, pirate) {
    this.sector = sector;
    this.num = num;
    this.x = x;
    this.y = y;
    this.color = color;
    this.itg = itg;
    this.pirate = pirate;
    this.pcount = rand(1, MAX_STAR_PLANETS);
    this.sid = "S-" + this.num + "." + (Math.round(this.x)) + "." + (Math.round(this.y));
  }

  Star.prototype.generate_planets = function() {
    var name, p, random, res, _results;
    random = grand(Math.prng(BASE_SEED + '.' + this.sector.x + '.' + this.sector.y + '.' + this.x + '.' + this.y));
    this.radius = random.frand(MIN_STAR_RAD, MAX_STAR_RAD);
    this.planets = [];
    p = 0;
    this.prices = {};
    for (name in RESOURCES) {
      if (!__hasProp.call(RESOURCES, name)) continue;
      res = RESOURCES[name];
      this.prices[name] = gaus(res.mean_price, res.price_stdv);
      this.prices[name] = Math.max(1, this.prices[name]);
    }
    _results = [];
    while (p < this.pcount) {
      this.planets.push(new Planet(this, "" + this.sid + ".P-" + p, p, false, this.known_itg_station, this.known_pirate_station));
      _results.push(++p);
    }
    return _results;
  };

  Star.prototype.planet_count = function() {
    var count, planet, _i, _len, _ref;
    if (this.planets === void 0) {
      return;
    }
    count = 0;
    _ref = this.planets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      planet = _ref[_i];
      count += planet.count();
    }
    return count;
  };

  return Star;

})();

MIN_ITG_REGIONS = 1;

MAX_ITG_REGIONS = 3;

MIN_ITG_REGION_RADIUS = 10;

MAX_ITG_REGION_RADIUS = 60;

MIN_PIRATE_REGIONS = 1;

MAX_PIRATE_REGIONS = 5;

MIN_PIRATE_REGION_RADIUS = 10;

MAX_PIRATE_REGION_RADIUS = 30;

LY_SCALE = 0.25;

starmap = void 0;

Starmap = (function() {

  Starmap.name = 'Starmap';

  function Starmap(x, y, density) {
    var arr, color, count, ctx, el, i, map, planet, radius, star, starcount;
    this.skip = false;
    this.sector = {
      x: x,
      y: y
    };
    this.cursor = {
      x: 0,
      y: 0
    };
    Math.seedrandom(BASE_SEED + x + ',' + y);
    this.itg_regions = [];
    i = 0;
    count = rand(MIN_ITG_REGIONS, MAX_ITG_REGIONS);
    while (i < count) {
      radius = frand(MIN_ITG_REGION_RADIUS, MAX_ITG_REGION_RADIUS);
      this.itg_regions.push({
        x: rand(radius, W - radius),
        y: rand(radius, H - radius - 16),
        radius: radius
      });
      ++i;
    }
    this.pirate_regions = [];
    i = 0;
    count = rand(MIN_PIRATE_REGIONS, MAX_PIRATE_REGIONS);
    while (i < count) {
      radius = frand(MIN_PIRATE_REGION_RADIUS, MAX_PIRATE_REGION_RADIUS);
      this.pirate_regions.push({
        x: rand(radius, W - radius),
        y: rand(radius, H - radius - 16),
        radius: radius
      });
      ++i;
    }
    this.stars = [];
    el = document.getElementById('starmap');
    this.starmap = document.getElementById('starmap');
    console.log(this.starmap);
    ctx = this.starmap.getContext('2d');
    ctx.clearRect(0, 0, W, H);
    map = ctx.getImageData(0, 0, W, H);
    i = 0;
    starcount = MAX_STAR_COUNT * density;
    while (i < starcount) {
      x = frand(1, W - 1);
      y = frand(17, H - 17);
      if (getPixel(map, Math.round(x), Math.round(y))[3] <= 0) {
        color = choose(starcolors);
        star = new Star(this.sector, i, x, y, color, this.itg_factor(x, y), this.pirate_factor(x, y));
        setPixel(map, Math.round(x), Math.round(y), color[0], color[1], color[2], color[3]);
        this.stars.push(star);
      }
      ++i;
    }
    ctx.putImageData(map, 0, 0);
    this.known_itg_stations = [];
    this.known_pirate_stations = [];
    i = 0;
    while (i < 300) {
      star = choose(this.stars);
      arr = this.known_itg_stations;
      planet = rand(0, star.pcount - 1);
      if (star.pirate > star.itg) {
        arr = this.known_pirate_stations;
        star.known_pirate_station = planet;
      } else {
        star.known_itg_station = planet;
      }
      arr.push({
        star: star,
        planet: planet
      });
      ++i;
    }
  }

  Starmap.prototype._factor = function(x, y, pirate) {
    var d, dx, dy, fac, region, regions, _i, _len;
    regions = void 0;
    if (pirate) {
      regions = this.pirate_regions;
    } else {
      regions = this.itg_regions;
    }
    fac = 0.0001;
    for (_i = 0, _len = regions.length; _i < _len; _i++) {
      region = regions[_i];
      dx = region.x - x;
      dy = region.y - y;
      d = Math.sqrt(dx * dx + dy * dy);
      fac += 1 / (d / region.radius);
    }
    return fac;
  };

  Starmap.prototype.pirate_factor = function(x, y) {
    return this._factor(x, y, true);
  };

  Starmap.prototype.itg_factor = function(x, y) {
    return this._factor(x, y);
  };

  Starmap.prototype.first = function() {
    var dx, dy, previous, vx, vy, x, y;
    if (this.skip) {
      console.log('skipping!');
      this.skip = false;
      return;
    }
    y = this.cursor.y;
    x = this.cursor.x;
    vx = 0;
    vy = 0;
    if (gbox.keyIsPressed('up')) {
      vy -= 1;
    } else if (gbox.keyIsPressed('down')) {
      vy += 1;
    }
    if (gbox.keyIsPressed('left')) {
      vx -= 1;
    } else if (gbox.keyIsPressed('right')) {
      vx += 1;
    }
    if (gbox.keyIsHeldForAtLeast('up', 30) || gbox.keyIsHeldForAtLeast('down', 30) || gbox.keyIsHeldForAtLeast('left', 30) || gbox.keyIsHeldForAtLeast('right', 30)) {
      this.faster = true;
    } else if (vx === 0 && vy === 0) {
      this.faster = false;
    }
    if (this.faster) {
      vx *= 2;
      vy *= 2;
    }
    this.cursor.x += vx;
    this.cursor.y += vy;
    if (this.closest_star && gbox.keyIsHit('a')) {
      if (player.fuel() >= this.closest_star.dist) {
        sounds.select.play();
        gbox.clearGroup('planetmap');
        this.closest_star.generate_planets();
        window.planetmap = new Planetmap(this.closest_star);
        window.planetmap.skip = true;
        gbox.addObject(planetmap);
        planetmapMode();
        if (this.current_star !== this.closest_star) {
          player.burn_fuel(this.closest_star.dist);
          date += this.closest_star.dist * player.ftl_ms_per_ly;
          current_planet = null;
          this.current_star = this.closest_star;
          this.closest_star.dist = 0;
        }
        return;
      } else {
        message.set('Insufficient fuel.', 90);
      }
    }
    if (gbox.keyIsHit('c')) {
      sounds.cancel.play();
      flightMode();
    }
    if (!this.closest_star || this.cursor.x !== x || this.cursor.y !== y) {
      previous = this.closest_star;
      this.closest_star = this.closest(this.cursor.x, this.cursor.y);
      dx = this.current_star.x - this.closest_star.x;
      dy = this.current_star.y - this.closest_star.y;
      return this.closest_star.dist = Math.sqrt(dx * dx + dy * dy) * LY_SCALE;
    }
  };

  Starmap.prototype.render = function(c) {
    c.drawImage(gbox.getImage('starmap_gui'), 0, 0);
    this.render_fuel_range(c);
    this.render_itg_regions(c);
    this.render_pirate_regions(c);
    if (this.current_star) {
      this.render_current_star(c);
      this.render_cursor(c);
      this.render_star_info(c, this.closest_star);
    }
    this.render_current_missions(c);
    return this.render_map(c);
  };

  Starmap.prototype.render_current_missions = function(c) {
    var m, _i, _len, _ref, _results;
    _ref = player.missions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      _results.push(this.render_mission(c, m));
    }
    return _results;
  };

  Starmap.prototype.render_map = function(c) {
    return c.drawImage(this.starmap, 0, 0);
  };

  Starmap.prototype.render_mission = function(c, m) {
    if (m.location) {
      return gbox.blitTile(c, {
        tileset: 'cursors',
        tile: 3,
        dx: Math.round(m.location.star.x) - 4,
        dy: Math.round(m.location.star.y) - 4
      });
    }
  };

  Starmap.prototype.render_itg_regions = function(c) {
    var r, _i, _len, _ref, _results;
    _ref = this.itg_regions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      r = _ref[_i];
      _results.push(circle(c, 'blue', Math.round(r.x), Math.round(r.y), r.radius));
    }
    return _results;
  };

  Starmap.prototype.render_pirate_regions = function(c) {
    var r, _i, _len, _ref, _results;
    _ref = this.pirate_regions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      r = _ref[_i];
      _results.push(circle(c, 'red', Math.round(r.x), Math.round(r.y), r.radius));
    }
    return _results;
  };

  Starmap.prototype.render_star_info = function(c, star) {
    var travel_time;
    dist = this.current_star.distance_to(star);
    travel_time = player.ftl_ms_per_ly * dist;
    return gbox.blitText(c, {
      font: 'small',
      text: "ETA " + (formatDateShort(date + travel_time)) + "(" + (Math.round((travel_time / DAYS) * 10) / 10) + " days)",
      dx: 1,
      dy: H - 12,
      dw: 64,
      dh: 16
    });
  };

  Starmap.prototype.render_current_star = function(c) {
    return gbox.blitTile(c, {
      tileset: 'cursors',
      tile: 1,
      dx: Math.round(this.current_star.x) - 4,
      dy: Math.round(this.current_star.y) - 4
    });
  };

  Starmap.prototype.render_cursor = function(c) {
    gbox.blitTile(c, {
      tileset: 'cursors',
      tile: 0,
      dx: Math.round(this.cursor.x) - 4,
      dy: Math.round(this.cursor.y) - 4
    });
    return this.render_selected_star(c, this.closest_star);
  };

  Starmap.prototype.render_selected_star = function(c, star) {
    return gbox.blitTile(c, {
      tileset: 'cursors',
      tile: 2,
      dx: Math.round(star.x) - 4,
      dy: Math.round(star.y) - 4
    });
  };

  Starmap.prototype.render_fuel_range = function(c) {
    return circle(c, '#33e5ff', Math.round(this.current_star.x), Math.round(this.current_star.y), player.fuel() / LY_SCALE);
  };

  Starmap.prototype.blit = function() {
    var c;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    return this.render(c);
  };

  Starmap.prototype.group = 'starmap';

  Starmap.prototype.closest = function(x, y) {
    var d2, dx, dy, minD2, ret, star, _i, _len, _ref;
    minD2 = 999999;
    ret = void 0;
    _ref = this.stars;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      star = _ref[_i];
      dx = x - star.x;
      dy = y - star.y;
      d2 = dx * dx + dy * dy;
      if (d2 < minD2) {
        minD2 = d2;
        ret = star;
      }
    }
    return ret;
  };

  return Starmap;

})();

flightMode = function(reset) {
  var baddy_count, g, groups, i, stopGroups, _i, _j, _len, _len1;
  if (reset) {
    gbox.clearGroup('friend_shots');
    gbox.clearGroup('foe_shots');
    gbox.clearGroup('particles');
    gbox.clearGroup('baddies');
    baddy_count = rand(0, 6);
    i = 0;
    while (i < baddy_count) {
      addBaddie();
      ++i;
    }
  }
  gbox.clearGroup('planet');
  gbox.clearGroup('resources');
  gbox.clearGroup('stations');
  gbox.clearGroup('radar');
  gbox.clearGroup('hud');
  gbox.addObject(new Radar);
  gbox.addObject(new Hud);
  gbox.addObject(player);
  if (current_planet) {
    gbox.addObject(current_planet);
    if (current_planet.itg_station) {
      gbox.addObject(current_planet.itg_station);
    }
    if (current_planet.pirate_station) {
      gbox.addObject(current_planet.pirate_station);
    }
    current_planet.addResources();
  }
  stopGroups = ['starmap', 'planetmap'];
  for (_i = 0, _len = stopGroups.length; _i < _len; _i++) {
    g = stopGroups[_i];
    gbox.stopGroup(g);
  }
  groups = ['background', 'planet', 'player', 'baddies', 'drones', 'friend_shots', 'foe_shots', 'resources', 'particles', 'stations', 'radar', 'hud'];
  for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
    g = groups[_j];
    gbox.stopGroup(g);
    gbox.toggleGroup(g);
  }
  player.skip = true;
  if (current_planet) {
    cam.x = current_planet._x - cam.w / 2;
    cam.y = current_planet._y - cam.h / 2;
    cam.reset = true;
  }
  return current_station = void 0;
};

GAME_OVER_MSGS = ['GAME IS OVER', 'DERP! You died.', 'Losing is fun.'];

BASE_THRUST = EQUIPMENT.thrust.levels[0].val;

BASE_SHIELDS = 3;

BASE_WCHARGE_RATE = EQUIPMENT.wcharge_rate.levels[0].val;

BASE_WCHARGE_CAP = 2;

BASE_WSPEED = 2;

BASE_WPOWER = EQUIPMENT.wpower.levels[0].val;

BASE_WSPAN = 80;

TURN_SPEED = 0.1;

BASE_CARGO_CAP = 5;

BASE_AFTERBURN = EQUIPMENT.afterburn.levels[0].val;

player = void 0;

date = 0;

Player = (function() {

  Player.name = 'Player';

  function Player(name) {
    var attr, eq;
    this.alive = true;
    this.missions = [];
    this.funds = 500;
    this.cabins = [];
    this.available_cabins = 3;
    this.wcharge_cap = BASE_WCHARGE_CAP;
    this.wcharge_rate = BASE_WCHARGE_RATE;
    this.wcharge = this.wcharge_cap;
    this.wspeed = BASE_WSPEED;
    this.wpower = BASE_WPOWER;
    this.wspan = BASE_WSPAN;
    this.thrust = BASE_THRUST;
    this.afterburn = BASE_AFTERBURN;
    this.shields_max = BASE_SHIELDS;
    this.shields = this.shields_max;
    this.itg_inspect_mod = 1;
    this.ftl_ms_per_ly = EQUIPMENT.ftl_ms_per_ly.levels[0].val;
    this.cargo = {
      fuel: [1, 2, 3, 4],
      narcotics: ['teehee', 2]
    };
    this.equipment = {};
    for (attr in EQUIPMENT) {
      if (!__hasProp.call(EQUIPMENT, attr)) continue;
      eq = EQUIPMENT[attr];
      if (!eq.no_default) {
        this.equipment[eq.name] = 0;
      }
    }
    this.init();
  }

  Player.prototype.burn_fuel = function(dist) {
    var _results;
    dist = Math.round(dist);
    _results = [];
    while (dist > 0) {
      this.cargo.fuel.pop();
      _results.push(--dist);
    }
    return _results;
  };

  Player.prototype.fuel = function() {
    return this.cargo.fuel.length;
  };

  Player.prototype.id = 'player_id';

  Player.prototype.group = 'player';

  Player.prototype.x = 0;

  Player.prototype.y = 0;

  Player.prototype.vx = 0;

  Player.prototype.vy = 0;

  Player.prototype.init = function() {
    this.skip = false;
    this.frame = 0;
    this.tileset = 'ship0_tiles';
    this.w = 8;
    this.h = 8;
    this.x = gbox.getScreenW() / 2 - this.w / 2;
    this.y = gbox.getScreenH() / 2 - this.h / 2;
    this.vx = 0;
    this.vy = 0;
    this.ang = 0;
    this.ax = 0;
    this.ay = 0;
    return this.particle_tick = 0;
  };

  Player.prototype.setAng = function(val) {
    this.ang = val;
    this.ax = Math.cos(this.ang) * this.thrust;
    return this.ay = Math.sin(this.ang) * this.thrust;
  };

  Player.prototype.first = function() {
    var _this = this;
    if (this.skip) {
      this.skip = false;
      return;
    }
    this.going = false;
    if (gbox.keyIsPressed('up')) {
      this.going = true;
      this.vx += this.ax;
      this.vy += this.ay;
    } else {
      if (!(gbox.keyIsPressed('down') || gbox.keyIsPressed('b'))) {
        this.vx *= 1 - this.afterburn;
        this.vy *= 1 - this.afterburn;
      }
    }
    if (gbox.keyIsPressed('right')) {
      this.setAng(this.ang + TURN_SPEED);
    } else if (gbox.keyIsPressed('left')) {
      this.setAng(this.ang - TURN_SPEED);
    }
    if (this.ang < 0) {
      this.ang = Math.PI * 2 - this.ang;
    }
    this.x += this.vx;
    this.y += this.vy;
    this.frame = Math.round(((this.ang + (Math.PI / 2)) / (Math.PI * 2)) * 16) % 16;
    if (this.going) {
      this.frame += 16;
      if (++this.particle_tick % 4 === 0) {
        addParticle('fire', this.x + this.w / 2, this.y + this.h / 2, this.vx - this.ax * 40 * frand(0.5, 1), this.vy - this.ay * 40 * frand(0.5, 1));
      }
    }
    if (gbox.keyIsHit('a') && (this.wcharge >= this.wpower)) {
      this.wcharge -= this.wpower;
      sounds.shot0.play();
      gbox.addObject(new Shot(this.x + this.w / 2, this.y + this.h / 2, this.x + this.w / 2 + (this.ax / this.thrust) * 20000, this.y + this.h / 2 + (this.ay / this.thrust) * 20000, this.wpower, this.wspeed, 4, 'friend_shots', this.wspan, this.vx, this.vy));
    }
    if (this.wcharge < this.wcharge_cap) {
      this.wcharge += this.wcharge_rate;
    }
    groupCollides(this, 'foe_shots', function(shot) {
      var i;
      sounds['hit' + rand(0, 3)].play();
      cam.shake += 5;
      i = 0;
      while (i < 3) {
        addParticle('fire', _this.x + _this.w / 2, _this.y + _this.h / 2, _this.vx + frand(-.5, .5), _this.vy + frand(-.5, .5));
        ++i;
      }
      _this.shields -= shot.power;
      if (_this.shields <= 0) {
        _this.die();
      }
      return shot.die();
    });
    if (!this.going) {
      if (Math.abs(this.vx) < 0.2) {
        this.vx = 0;
      }
      if (Math.abs(this.vy) < 0.2) {
        this.vy = 0;
      }
    }
    if (gbox.keyIsHit('c')) {
      return planetmapMode();
    }
  };

  Player.prototype.blit = function() {
    return gbox.blitTile(gbox.getBufferContext(), {
      tileset: this.tileset,
      tile: this.frame,
      dx: Math.round(this.x - cam.x),
      dy: Math.round(this.y - cam.y)
    });
  };

  Player.prototype.die = function() {
    var i, _results;
    sounds.explode.play();
    this.alive = false;
    gbox.trashObject(this);
    message.set(choose(GAME_OVER_MSGS));
    i = 0;
    while (i < 20) {
      addParticle('fire', this.x + this.w / 2, this.y + this.h / 2, this.vx + frand(-1, 1), this.vy + frand(-1, 1));
      ++i;
    }
    i = 0;
    _results = [];
    while (i < 12) {
      addParticle('wreckage', this.x + this.w / 2, this.y + this.h / 2, this.vx + frand(-0.5, 0.5), this.vy + frand(-.5, .5));
      _results.push(++i);
    }
    return _results;
  };

  return Player;

})();

addDrone = function() {
  return gbox.addObject({
    group: 'drones',
    init: function() {
      this.deployed = false;
      this.frame = 0;
      this.tileset = 'drones_tiles';
      this.w = 5;
      this.h = 5;
      this.x = player.x + player.h / 2 - this.w / 2;
      this.y = player.y + player.h / 2 - this.h / 2;
      this.vx = 0;
      this.vy = 0;
      this.ang = Math.random() * Math.PI * 2;
      this.xoff = Math.cos(this.ang);
      this.yoff = Math.sin(this.ang);
      return this.dist = 20;
    },
    first: function() {
      var p, tx, ty;
      this.ang += 0.02;
      this.xoff = Math.cos(this.ang);
      this.yoff = Math.sin(this.ang);
      p = player;
      tx = p.x + 4 + this.dist * this.xoff || 0;
      ty = p.y + 4 + this.dist * this.yoff || 0;
      this.x += (tx - this.x) * 0.025;
      return this.y += (ty - this.y) * 0.025;
    },
    initialize: function() {
      return this.init();
    },
    blit: function() {
      return gbox.blitTile(gbox.getBufferContext(), {
        tileset: this.tileset,
        tile: this.frame,
        dx: Math.round(this.x - cam.x),
        dy: Math.round(this.y - cam.y)
      });
    }
  });
};

DEFAULT_RADAR_RENDER = function(x, y, alpha) {
  var c;
  x = clamp(x, 4, cam.w - 4) + 0.5;
  y = clamp(y, 4, cam.h - 4) + 0.5;
  c = gbox.getBufferContext();
  if (c) {
    return circle(c, 'yellow', Math.round(x), Math.round(y), 1);
  }
};

RADAR_ITEMS = {
  'planet': {
    min_dist: function() {
      return -1;
    },
    render: function(x, y, alpha) {
      var r;
      r = 4 / current_planet.radius;
      return current_planet.render(r, Math.round(clamp(x, 4, W - 4)), Math.round(clamp(y, 4, H - 4)), current_planet.dirx, current_planet.diry);
    }
  },
  'stations': {
    min_dist: function() {
      return -1;
    }
  }
};

Radar = (function() {

  Radar.name = 'Radar';

  Radar.prototype.group = 'radar';

  function Radar() {}

  Radar.prototype.blit = function() {
    var c, d, dx, dy, group, id, item, obj, x, y, _results, _x, _y;
    c = {
      x: player.x - cam.x,
      y: player.y - cam.y
    };
    _results = [];
    for (group in RADAR_ITEMS) {
      if (!__hasProp.call(RADAR_ITEMS, group)) continue;
      item = RADAR_ITEMS[group];
      _results.push((function() {
        var _ref, _results1;
        _ref = gbox.getGroup(group);
        _results1 = [];
        for (id in _ref) {
          if (!__hasProp.call(_ref, id)) continue;
          obj = _ref[id];
          dx = (obj.x - cam.x) - c.x;
          dy = (obj.y - cam.y) - c.y;
          d = Math.sqrt(dx * dx + dy * dy);
          if (item.min_dist() < 0 || d < item.min_dist()) {
            _x = c.x + dx;
            _y = c.y + dy;
            x = clamp(c.x + dx, 0, cam.w);
            y = clamp(c.y + dy, 0, cam.h);
            if (_x === x && _y === y) {
              continue;
            }
            if (item.render) {
              _results1.push(item.render(x, y, 1));
            } else {
              _results1.push(DEFAULT_RADAR_RENDER(x, y, 1));
            }
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  return Radar;

})();

HUD_X = 10;

HUD_Y = 10;

HUD_BAR_W = 4;

HUD_BAR_H = 50;

HUD_SHIELD_X = 0;

HUD_SHIELD_Y = 0;

Hud = (function() {

  Hud.name = 'Hud';

  Hud.prototype.group = 'hud';

  function Hud() {
    this.h = HUD_BAR_H;
  }

  Hud.prototype.blit = function() {
    var c, extrax, extray, h_diff;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    c.fillStyle = 'rgba(255,255,255,0.5)';
    c.fillRect(Math.round(HUD_X + HUD_SHIELD_X + 2), Math.round(HUD_Y + HUD_SHIELD_Y + 9), HUD_BAR_W, HUD_BAR_H);
    h_diff = 0;
    if (player.shields > 0) {
      this.target_h = HUD_BAR_H * player.shields / player.shields_max;
      h_diff = (this.target_h - this.h) * 0.05;
    }
    extrax = 0;
    extray = 0;
    if ((player.shields <= 1) && (player.shields > 0)) {
      c.fillStyle = 'rgba(255,0,0,1)';
      extrax = frand(-1, 1);
      extray = frand(-1, 1);
    } else {
      c.fillStyle = 'rgba(255,255,255,1)';
    }
    gbox.blitText(c, {
      font: 'small',
      text: 'S',
      dx: Math.round(HUD_X + HUD_SHIELD_X + frand(-5, 5) * h_diff + extrax),
      dy: Math.round(HUD_Y + HUD_SHIELD_Y + frand(-5, 5) * h_diff + extray),
      dw: 16,
      dh: 16
    });
    if (player.shields <= 0) {
      return;
    }
    this.h += h_diff;
    return c.fillRect(Math.round(HUD_X + HUD_SHIELD_X + 2 + extrax), Math.round(HUD_Y + HUD_SHIELD_Y + 9 + extrax), HUD_BAR_W, Math.round(this.h));
  };

  return Hud;

})();

RESOURCES = {
  'scrap metal': {
    num: 0,
    natural: true,
    tons_per_unit: 1,
    gas_giant_prob: 0.1,
    rocky_prob: 0.5,
    moon_prob: 0.75,
    mean_price: 20,
    price_stdv: 2,
    min_dist: 0.5,
    max_dist: 3
  },
  'lifeforms': {
    num: 1,
    natural: true,
    tons_per_unit: 0.05,
    gas_giant_prob: 0.05,
    rocky_prob: 0.2,
    moon_prob: 0.1,
    mean_price: 30,
    price_stdv: 4,
    min_dist: 0,
    max_dist: 1
  },
  'fuel': {
    num: 2,
    natural: true,
    tons_per_unit: 0.25,
    gas_giant_prob: 0.25,
    rocky_prob: 0.1,
    moon_prob: 0.1,
    mean_price: 5,
    price_stdv: 0.5,
    min_dist: 0,
    max_dist: 1.25
  },
  'minerals': {
    num: 3,
    natural: true,
    tons_per_unit: 0.5,
    gas_giant_prob: 0.05,
    rocky_prob: 0.5,
    moon_prob: 0.2,
    mean_price: 5,
    price_stdv: 1,
    min_dist: 0,
    max_dist: 1
  },
  'narcotics': {
    num: 4,
    natural: false,
    tons_per_unit: 0.01,
    gas_giant_prob: 0,
    rocky_prob: 0,
    moon_prob: 0,
    mean_price: 50,
    price_stdv: 9,
    pirate_mod_min: 0.66,
    pirate_mod_max: 0.9,
    min_dist: 4,
    max_dist: 5
  }
};

CargoItem = (function() {

  CargoItem.name = 'CargoItem';

  function CargoItem(origin) {
    this.origin = origin;
  }

  return CargoItem;

})();

Resource = (function() {

  Resource.name = 'Resource';

  Resource.prototype.group = 'resources';

  function Resource(name, x, y, vx, vy, planet) {
    this.planet = planet;
    this.num = RESOURCES[name].num;
    this.name = name;
    this.next_frame = this.frame_length;
    this.frame = rand(this.num * 8, this.num * 8 + 8);
    this.tileset = 'resources_tiles';
    this.w = 3;
    this.h = 3;
    if (vx && vy) {
      this.vx = vx;
      this.vy = vy;
    }
    this.tick = 0;
    this.xoff = x;
    this.yoff = y;
    this.x = 0;
    this.y = 0;
    this.active = true;
  }

  Resource.prototype.frame_length = 4;

  Resource.prototype.vx = 0;

  Resource.prototype.vy = 0;

  Resource.prototype.die = function() {
    this.active = false;
    return gbox.trashObject(this);
  };

  Resource.prototype.first = function() {
    if (!this.active) {
      return;
    }
    if (this.planet) {
      this.x = this.planet.x + this.xoff;
      this.y = this.planet.y + this.yoff;
    } else {
      this.x += this.vx;
      this.y += this.vy;
      this.vx *= 0.005;
      this.vy *= 0.005;
    }
    if (gbox.collides(player, this)) {
      sounds.blip.play();
      if (!player.cargo[this.name]) {
        player.cargo[this.name] = [];
      }
      player.cargo[this.name].push(new CargoItem(current_planet.pid));
      message.set('+1 ' + this.name, 60);
      this.die();
    }
    --this.next_frame;
    if (this.next_frame < 0) {
      this.frame = this.num * 8 + ((this.frame % 8) + 1) % 8;
      return this.next_frame = this.frame_length;
    }
  };

  Resource.prototype.blit = function() {
    if (!this.active) {
      return;
    }
    return gbox.blitTile(gbox.getBufferContext(), {
      tileset: this.tileset,
      tile: this.frame,
      dx: Math.round(this.x - cam.x),
      dy: Math.round(this.y - cam.y)
    });
  };

  return Resource;

})();

ResourceExchanger = (function(_super) {

  __extends(ResourceExchanger, _super);

  ResourceExchanger.name = 'ResourceExchanger';

  function ResourceExchanger(name, station) {
    this.name = name;
    this.station = station;
    ResourceExchanger.__super__.constructor.call(this, this.name);
    this.resource = RESOURCES[this.name];
    this.price = this.station.prices[this.name];
  }

  ResourceExchanger.prototype.a = function() {
    if (!this.station.cargo[this.name] || this.station.cargo[this.name].length <= 0) {
      return;
    }
    if (player.funds < this.price) {
      message.set('Insufficient funds.', 120);
      return;
    }
    player.funds -= this.price;
    if (!player.cargo[this.name]) {
      player.cargo[this.name] = [];
    }
    player.cargo[this.name].push(this.station.cargo[this.name].pop());
    return sounds.blip.play();
  };

  ResourceExchanger.prototype.b = function() {
    if (!player.cargo[this.name] || player.cargo[this.name].length <= 0) {
      return;
    }
    player.funds += this.price;
    if (!this.station.cargo[this.name]) {
      this.station.cargo[this.name] = [];
    }
    this.station.cargo[this.name].push(player.cargo[this.name].pop());
    return sounds.blip.play();
  };

  ResourceExchanger.prototype.render = function(x, y, alpha) {
    var c, lamt, ramt;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    lamt = ramt = 0;
    if (player.cargo[this.name]) {
      lamt = player.cargo[this.name].length;
    }
    if (this.station.cargo[this.name]) {
      ramt = this.station.cargo[this.name].length;
    }
    gbox.blitText(c, {
      font: 'small',
      text: this.name,
      dx: x + 16,
      dy: y,
      alpha: alpha,
      dw: W,
      dh: LINE_HEIGHT,
      halign: gbox.ALIGN_LEFT,
      valign: gbox.ALIGN_TOP
    });
    gbox.blitText(c, {
      font: 'small',
      text: "[" + lamt + "]",
      dx: x + 128,
      dy: y,
      alpha: alpha,
      dw: W - 128,
      dh: LINE_HEIGHT,
      halign: gbox.ALIGN_LEFT,
      valign: gbox.ALIGN_TOP
    });
    gbox.blitText(c, {
      font: 'small',
      text: "<-$" + this.price + "->",
      dx: x + 128,
      dy: y,
      alpha: alpha,
      dw: W - 128,
      dh: LINE_HEIGHT,
      halign: gbox.ALIGN_CENTER,
      valign: gbox.ALIGN_TOP
    });
    return gbox.blitText(c, {
      font: 'small',
      text: "[" + ramt + "]",
      dx: x + 128,
      dy: y,
      alpha: alpha,
      dw: W - 128,
      dh: LINE_HEIGHT,
      halign: gbox.ALIGN_RIGHT,
      valign: gbox.ALIGN_TOP
    });
  };

  return ResourceExchanger;

})(MenuItem);

stationMode = function(station) {
  var g, groups, stopGroups, _i, _j, _len, _len1;
  current_station = station;
  stopGroups = ['background', 'planet', 'player', 'baddies', 'drones', 'friend_shots', 'foe_shots', 'resources', 'particles', 'starmap', 'stations', 'radar', 'hud'];
  for (_i = 0, _len = stopGroups.length; _i < _len; _i++) {
    g = stopGroups[_i];
    gbox.stopGroup(g);
  }
  menustack = new MenuStack;
  menustack.pushMenu(new StationScreen(station, menustack));
  gbox.addObject(menustack);
  groups = ['menustack'];
  for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
    g = groups[_j];
    gbox.stopGroup(g);
    gbox.toggleGroup(g);
  }
  return player.skip = true;
};

STATIONS = {
  'itg': {
    num: 0,
    frame_length: 60 / 2,
    fugitive_rate: 0.1
  },
  'pirate': {
    num: 1,
    frame_length: 60 / 2,
    fugitive_rate: 0.4
  }
};

DOCKING_DURATION = 80;

Station = (function() {

  Station.name = 'Station';

  Station.prototype.new_missions = function() {
    var activity, c, count, i, max_count, max_resource_count, mission, mission_count, name, person, res, resource_wealth, _results;
    menustack = new MenuStack;
    max_count = PLANET_CLASSES[this.planet.ptype].max_mission_count;
    activity = this.planet.star.itg + this.planet.star.pirate;
    mission_count = Math.round(Math.min(max_count, frand(0, 1) * activity * max_count));
    this.missions = [];
    i = 0;
    while (i < mission_count) {
      person = new Person('passenger', frand(0, 1) < STATIONS[this.name].fugitive_rate);
      mission = void 0;
      switch (rand(0, 0)) {
        case 0:
          mission = new TaxiMission(person);
          break;
        default:
          mission = new CrewMission(person);
      }
      this.missions.push(mission);
      ++i;
    }
    this.cargo = {};
    max_resource_count = ((Math.PI * this.planet.radius * this.planet.radius) / 50) * this.planet.wealth;
    _results = [];
    for (name in RESOURCES) {
      if (!__hasProp.call(RESOURCES, name)) continue;
      res = RESOURCES[name];
      this.cargo[name] = [];
      resource_wealth = 0;
      count = 0;
      if (res.natural) {
        resource_wealth = res[this.planet.ptype + '_prob'];
        count = 2 * Math.round(frand(0, resource_wealth * max_resource_count));
      } else {
        resource_wealth = frand(0, 1);
        count = 50 * frand(0, this.planet.star.itg + this.planet.star.pirate);
      }
      c = 0;
      _results.push((function() {
        var _results1;
        _results1 = [];
        while (c < count) {
          this.cargo[name].push(new CargoItem(this.planet.pid));
          _results1.push(++c);
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Station.prototype.group = 'stations';

  function Station(planet, name, x, y) {
    var n, p, _ref;
    this.planet = planet;
    this.name = name;
    this.x = x;
    this.y = y;
    this.num = STATIONS[this.name].num;
    this.frame_length = STATIONS[this.name].frame_length;
    this.next_frame = this.frame_length;
    this.frame = this.num * 4;
    this.tileset = 'stations_tiles';
    this.ang = 0;
    this.docking_count = 0;
    this.cargo = {};
    this.prices = {};
    _ref = this.planet.prices;
    for (n in _ref) {
      if (!__hasProp.call(_ref, n)) continue;
      p = _ref[n];
      this.prices[n] = this.planet.random.gaus(p, RESOURCES[n].price_stdv / 3);
      if (this.name === 'pirate' && RESOURCES[n].pirate_mod_min) {
        this.prices[n] *= this.planet.random.frand(RESOURCES[n].pirate_mod_min, RESOURCES[n].pirate_mod_max);
      }
      this.prices[n] = Math.round(this.prices[n] * 100) / 100;
    }
  }

  Station.prototype.w = 32;

  Station.prototype.h = 32;

  Station.prototype.die = function() {
    return gbox.trashObject(this);
  };

  Station.prototype.first = function() {
    --this.next_frame;
    if (this.next_frame < 0) {
      this.frame = this.num * 4 + ((this.frame % 4) + 1) % 4;
      this.next_frame = this.frame_length;
    }
    this.ang += 0.034;
    this.yoff = 2 * Math.sin(this.ang);
    if (!player.going && gbox.collides(this, player)) {
      player.vx *= 0.95;
      player.vy *= 0.95;
      ++this.docking_count;
    } else {
      this.docking_count = 0;
    }
    if (this.docking_count > DOCKING_DURATION) {
      stationMode(this);
      return this.docking_count = -DOCKING_DURATION;
    }
  };

  Station.prototype.blit = function() {
    return gbox.blitTile(gbox.getBufferContext(), {
      tileset: this.tileset,
      tile: this.frame,
      dx: Math.round(this.x - cam.x),
      dy: Math.round(this.y + this.yoff - cam.y)
    });
  };

  return Station;

})();

drawFunds = function() {
  return gbox.blitText(gbox.getBufferContext(), {
    font: 'small',
    text: 'FUNDS: $' + Math.round(player.funds * 100) / 100,
    dx: 2,
    dy: H - 12,
    dw: W,
    dh: 16,
    halign: gbox.ALIGN_LEFT,
    valign: gbox.ALIGN_TOP
  });
};

STATION_SUB_SCREENS = [
  {
    name: 'Cargo',
    extra_blit: drawFunds
  }, {
    name: 'Missions'
  }, {
    name: 'Hangar',
    extra_blit: drawFunds
  }
];

ITG_INSPECT_PROB = 0.5;

StationScreen = (function(_super) {

  __extends(StationScreen, _super);

  StationScreen.name = 'StationScreen';

  function StationScreen(station) {
    var attr, d, eq, i, mission, name, ncount, r, scr, _i, _j, _len, _len1, _ref;
    this.station = station;
    StationScreen.__super__.constructor.call(this);
    this.skip = false;
    i = 0;
    for (_i = 0, _len = STATION_SUB_SCREENS.length; _i < _len; _i++) {
      scr = STATION_SUB_SCREENS[_i];
      this.pushItem(new MenuItem(scr.name));
      this.pushSubMenu(new VMenu);
      switch (scr.name) {
        case 'Cargo':
          for (name in RESOURCES) {
            if (!__hasProp.call(RESOURCES, name)) continue;
            r = RESOURCES[name];
            this.sub_menus[i].pushItem(new ResourceExchanger(name, this.station));
          }
          break;
        case 'Missions':
          _ref = this.station.missions;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            mission = _ref[_j];
            this.sub_menus[i].pushItem(mission);
          }
          break;
        case 'Hangar':
          for (attr in EQUIPMENT) {
            if (!__hasProp.call(EQUIPMENT, attr)) continue;
            eq = EQUIPMENT[attr];
            eq.attr = attr;
            this.sub_menus[i].pushItem(new Equipment(eq));
          }
      }
      ++i;
    }
    this.current_sub_menu = this.sub_menus[this.selected];
    if (this.station.name === 'itg' && (ITG_INSPECT_PROB * player.itg_inspect_mod > frand(0, 1))) {
      if (player.cargo.narcotics && player.cargo.narcotics.length > 0) {
        ncount = player.cargo.narcotics.length;
        player.cargo.narcotics = [];
        d = new Dialog("ITG probe-drones have detected " + ncount + " units of illegal narcotics aboard your vessel during a random search. \"In accordance with ITG regulation L5424:IXV:a, the offending materials have been 'CONFISCATED' and will be 'DESTROYED' immediately\".");
        d.pushItem(new DialogChoice('[Press Z to Continue]'));
        setDialog(d);
      }
    }
  }

  StationScreen.prototype.update = function() {
    if (this.skip) {
      this.skip = false;
      return;
    }
    StationScreen.__super__.update.call(this);
    if (gbox.keyIsHit('c')) {
      player.y = this.station.y - (player.h + 2);
      player.x = this.station.x + this.station.w / 2;
      player.vy = -0.199999999;
      player.setAng(1.5 * Math.PI);
      return flightMode();
    }
  };

  StationScreen.prototype.render = function() {
    var c, extra;
    c = gbox.getBufferContext();
    if (!c) {
      return;
    }
    this.render_bg(c);
    StationScreen.__super__.render.call(this, 0, 4, 1);
    extra = STATION_SUB_SCREENS[this.selected].extra_blit;
    if (extra) {
      return extra(c);
    }
  };

  return StationScreen;

})(MultiMenu);

BASE_SEED = 'WEEEEE';

Math.seedrandom(BASE_SEED);

starcolors = [];

planetcolors = [];

loadColors = function() {
  var idx, idy, planetcolors_canvas, planetcolors_ctx, planetcolors_el, planetcolors_img, starcolors_canvas, starcolors_ctx, starcolors_el, starcolors_img, _results;
  starcolors_el = gbox.getImage('starcolors');
  starcolors_canvas = document.getElementById('starcolors');
  starcolors_ctx = starcolors_canvas.getContext('2d');
  starcolors_ctx.drawImage(starcolors_el, 0, 0);
  starcolors_img = starcolors_ctx.getImageData(0, 0, starcolors_canvas.width, starcolors_canvas.height);
  starcolors = [];
  idx = 0;
  while (idx < starcolors_el.width) {
    starcolors.push(getPixel(starcolors_img, idx, 0));
    ++idx;
  }
  planetcolors_el = gbox.getImage('planetcolors');
  planetcolors_canvas = document.getElementById('planetcolors');
  planetcolors_ctx = planetcolors_canvas.getContext('2d');
  planetcolors_ctx.drawImage(planetcolors_el, 0, 0);
  planetcolors_img = planetcolors_ctx.getImageData(0, 0, planetcolors_canvas.width, planetcolors_canvas.height);
  planetcolors = [];
  idy = 0;
  _results = [];
  while (idy < planetcolors_el.height) {
    planetcolors.push([]);
    idx = 0;
    while (idx < planetcolors_el.width) {
      planetcolors[idy].push(getPixel(planetcolors_img, idx, idy));
      ++idx;
    }
    _results.push(++idy);
  }
  return _results;
};

W = 320;

H = 320;

loadResources = function() {
  help.akihabaraInit({
    title: 'μniverse',
    width: W,
    height: H,
    zoom: 2
  });
  gbox.setFps(60);
  gbox.addImage('starcolors', 'starcolors.png');
  gbox.addImage('planetcolors', 'planetcolors.png');
  gbox.addImage('starmap_gui', 'starmap_gui.png');
  gbox.addImage('starmap_gui_cursors', 'starmap_gui_cursors.png');
  gbox.addTiles({
    id: 'cursors',
    image: 'starmap_gui_cursors',
    tileh: 9,
    tilew: 9,
    tilerow: 1,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('bg', 'bg.png');
  gbox.addImage('logo', 'logo.png');
  gbox.addImage('ship0', 'ship0.png');
  gbox.addTiles({
    id: 'ship0_tiles',
    image: 'ship0',
    tileh: 8,
    tilew: 8,
    tilerow: 16,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('bad0', 'bad0.png');
  gbox.addImage('planet0', 'planet0.png');
  gbox.addImage('drones', 'drones.png');
  gbox.addTiles({
    id: 'drones_tiles',
    image: 'drones',
    tileh: 5,
    tilew: 5,
    tilerow: 3,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('stations', 'stations.png');
  gbox.addTiles({
    id: 'stations_tiles',
    image: 'stations',
    tileh: 32,
    tilew: 32,
    tilerow: 4,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('fugitive_icon', 'fugitive_icon.png');
  gbox.addImage('peoples', 'peoples.png');
  gbox.addTiles({
    id: 'peoples_tiles',
    image: 'peoples',
    tileh: 16,
    tilew: 16,
    tilerow: 16,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('resources', 'resources.png');
  gbox.addTiles({
    id: 'resources_tiles',
    image: 'resources',
    tileh: 1,
    tilew: 1,
    tilerow: 8,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('particles', 'particles.png');
  gbox.addTiles({
    id: 'particles_tiles',
    image: 'particles',
    tileh: 1,
    tilew: 1,
    tilerow: 16,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('shots', 'shots.png');
  gbox.addTiles({
    id: 'shots_tiles',
    image: 'shots',
    tileh: 3,
    tilew: 3,
    tilerow: 9,
    gapx: 0,
    gapy: 0
  });
  gbox.addImage('font', 'font.png');
  gbox.addFont({
    id: 'small',
    image: 'font',
    firstletter: '!',
    tileh: 8,
    tilew: 8,
    tilerow: 20,
    gapx: 0,
    gapy: 0
  });
  return gbox.loadAll(main);
};

cam = {
  x: 0,
  y: 0
};

addCamera = function() {
  return gbox.addObject({
    id: 'cam_id',
    x: 0,
    y: 0,
    vx: 0,
    vy: 0,
    group: 'game',
    initialize: function() {
      this.max_dist = 100;
      this.max_dist2 = this.max_dist * this.max_dist;
      this.x = 100;
      this.y = 100;
      this.vx = 0;
      this.vy = 0;
      this.w = W;
      this.h = H;
      return this.shake = 0;
    },
    first: function() {
      var c, d, d2, ddx, ddy, dr, dx, dy;
      this.vx = (player.x + player.vx * 60 - (this.x + 160)) * 0.05;
      this.vy = (player.y + player.vy * 60 - (this.y + 160)) * 0.05;
      this.x += this.vx;
      this.y += this.vy;
      if (this.shake > 0.5) {
        this.x += this.shake * rand(-1, 1);
        this.y += this.shake * rand(-1, 1);
        this.shake *= 0.95;
      }
      c = {
        x: this.x + this.w / 2,
        y: this.y + this.h / 2
      };
      dx = c.x - player.x;
      dy = c.y - player.y;
      d2 = dx * dx + dy * dy;
      if (d2 > this.max_dist2) {
        d = Math.sqrt(d2);
        dr = (d - this.max_dist) / d;
        ddx = dr * dx;
        ddy = dr * dy;
        this.x -= ddx;
        return this.y -= ddy;
      }
    }
  });
};

maingame = void 0;

main = function() {
  gbox.setGroups(['background', 'game', 'starmap', 'planetmap', 'menustack', 'planet', 'stations', 'resources', 'particles', 'player', 'friend_shots', 'baddies', 'drones', 'foe_shots', 'hud', 'radar', 'message', 'dialog']);
  loadColors();
  maingame = gamecycle.createMaingame('game', 'game');
  maingame.gameMenu = function() {
    return true;
  };
  maingame.gameIntroAnimation = function() {
    return true;
  };
  maingame.gameTitleIntroAnimation = function() {
    gbox.blitFade(gbox.getBufferContext(), {
      alpha: 1
    });
    gbox.blitAll(gbox.getBufferContext(), gbox.getImage('logo'), {
      dx: 1,
      dy: 1
    });
    return gbox.keyIsHit('a');
  };
  maingame.pressStartIntroAnimation = function(reset) {
    return gbox.keyIsHit('a');
  };
  maingame.initializeGame = function() {
    date = startDate();
    console.log(formatDate(date));
    player = new Player;
    starmap = new Starmap(5, 34, 0.6);
    starmap.current_star = starmap.known_itg_stations[0].star;
    starmap.cursor = {
      x: starmap.current_star.x,
      y: starmap.current_star.y
    };
    starmap.current_star.generate_planets();
    current_planet = choose(starmap.current_star.planets);
    window.planetmap = new Planetmap(starmap.current_star);
    gbox.addObject(message);
    gbox.addObject(starmap);
    gbox.addObject(new MissionTicker);
    cam = addCamera();
    return gbox.addObject({
      id: 'bg_id',
      group: 'background',
      color: 'rgb(0,0,0)',
      tick: 0,
      blit: function() {
        var x, y;
        gbox.blitFade(gbox.getBufferContext(), {
          color: '#000510',
          alpha: 1
        });
        x = -cam.x / 2;
        y = -cam.y / 2;
        gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W),
          dy: Math.round(y % H)
        });
        gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W - W),
          dy: Math.round(y % H - H)
        });
        gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W),
          dy: Math.round(y % H - H)
        });
        gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W + W),
          dy: Math.round(y % H - H)
        });
        gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W + W),
          dy: Math.round(y % H)
        });
        gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W),
          dy: Math.round(y % H + H)
        });
        gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W - W),
          dy: Math.round(y % H + H)
        });
        return gbox.blitAll(gbox.getBufferContext(), gbox.getImage('bg'), {
          dx: Math.round(x % W - W),
          dy: Math.round(y % H)
        });
      }
    });
  };
  return gbox.go();
};

window.addEventListener('load', loadResources, false);
